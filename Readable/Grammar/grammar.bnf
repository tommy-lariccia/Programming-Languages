// GRAMMAR - Tommy Lariccia
// https://github.com/tommy-lariccia/Programming-Languages/tree/main/Readable


program ::= statement*

statement ::= progStatement comment? lineEndChar
            | comment lineEndChar
            | commentBlock lineEndChar

progStatement ::= functionDefinition
                | functionCall
                | variableInitializationAssignment
                | conditionalStatement
                | loopStatement
                | lambdaInitialization

lineEndChar ::= "\n" | "\r"


// COMMENTS
comment ::= "//" (!"\n")*  // anything but newline character

commentBlock ::= "/*" (!"*\\")* "*\\"


// TYPES
booleanOpts ::= "true" | "false"

typing ::= typingArr | typingKeywords

typingArr ::= typingKeywords"[]"

typingKeywords ::= "int" | "str" | "bool" | "float"


// VARIABLES
variableInitializationAssignment ::= assignment | arrSlotAssign

arrSlotBegin ::= typingKeywords"["

assignment ::= assignmentPrefix? IDENTIFIER "=" expression

assignmentPrefix ::= "local" | typing  // mutually exclusive, local only for dynamic variables

arrSlotAssign ::= arrSlotBegin expression "]" "=" expression  // TODO: Typing required?

arr ::= "[" exprList? "]"

arrAccess ::= arrSlotBegin expression "]"

exprList ::= expression
            | expression "," exprList


// EXPRESSIONS
expression ::= binaryExpression

binaryExpression ::= unaryExpression binaryOp binaryExpression
                   | unaryExpression

binaryOp ::= '*' | '/' | '+' | '-' | "and" | "or" | "==" | ">" | "<" | ">=" | "<="

unaryExpression ::= frontUnaryExpression | backUnaryExpression | terminalExpression  // no use for combining unaries

frontUnaryExpression ::= frontUnaryOperator terminalExpression

backUnaryExpression ::= terminalExpression backUnaryOperator

frontUnaryOperator ::= "-" | "!"

backUnaryOperator ::= "++" | "--"

parenExpression ::= "(" expression ")"

terminalExpression ::= functionCall | INT_LIT | FLOAT_LIT | IDENTIFIER | STRING_LIT | parenExpression | booleanOpts |
                       arr | arrAccess | "null"


// BLOCKS
block ::= blockStart blockSpace

blockStart ::= ":" lineEndChar

blockSpace ::= QUADSPACE statement
        | QUADSPACE statement lineEndChar blockSpace


// FUNCTIONS
functionCall ::= IDENTIFIER "(" argList? ")"

argList ::= expression
          | expression "," argList

paramList ::= parameter
            | parameter "," paramList

parameter ::= typing? IDENTIFIER

returnStatement ::= "return" expression

functionDefinition ::= "func" typing? IDENTIFIER "(" paramList? ")" block QUADSPACE returnStatement

lambdaInitialization ::= "lambda" IDENTIFIER "=" "(" paramList? ")" "=>" expression


// LOOPS
loopStatement ::= whileLoop | forEachLoop

whileLoop ::= "while" expression block

forEachLoop ::= "foreach" IDENTIFIER "in" iterable block

iterable ::= arr | INT_LIT | range

range ::= INT_LIT".."INT_LIT


// CONDITIONALS
conditionalStatement ::= ifBlock elifBlock* elseBlock?

ifBlock ::= "if" expression block

elifBlock ::= lineEndChar "else" "if" expression block

elseBlock ::= lineEndChar "else" expression block